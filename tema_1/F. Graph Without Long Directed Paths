#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int N = 2e5 + 5;
vector<int> adj[N];
vector<int> color(N, -1);

bool isBipartite(int u) {
    queue<int> q;
    q.push(u);
    color[u] = 0;

    while (!q.empty()) {
        int v = q.front();
        q.pop();

        for (int neighbor : adj[v]) {
            if (color[neighbor] == -1) {
                color[neighbor] = 1 - color[v];
                q.push(neighbor);
            } else if (color[neighbor] == color[v]) {
                return false;
            }
        }
    }
    return true;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<pair<int, int>> edges; //Stocam muchiile

    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        edges.push_back({u, v}); //Stocam muchia (u, v) în vectorul edges
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    if (!isBipartite(1)) {
        cout << "NO" << endl;
    } else {
        cout << "YES" << endl;
        for (auto &edge : edges) {
            int u = edge.first;
            int v = edge.second;
            // Orientăm muchia în funcție de culoare
            cout << (color[u] < color[v] ? 0 : 1);
        }
        cout << endl;
    }

    return 0;
}
